// <auto-generated />
using System;
using Imdb.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imdb.Migrations
{
    [DbContext(typeof(ImdbContext))]
    [Migration("20201216083045_TablesAndRelation")]
    partial class TablesAndRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.Cast", b =>
                {
                    b.Property<int>("CastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Born")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CastID");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.CastOfMovie", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("CastID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("MovieID", "CastID", "RoleID");

                    b.HasIndex("CastID");

                    b.HasIndex("RoleID");

                    b.ToTable("CastOfMovies");
                });

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TorrentLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.CastOfMovie", b =>
                {
                    b.HasOne("Imdb.DataAccessLayer.Entity.Cast", "Cast")
                        .WithMany("CastAndMovie")
                        .HasForeignKey("CastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imdb.DataAccessLayer.Entity.Movie", "Movie")
                        .WithMany("CastAndMovie")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imdb.DataAccessLayer.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Movie");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.Cast", b =>
                {
                    b.Navigation("CastAndMovie");
                });

            modelBuilder.Entity("Imdb.DataAccessLayer.Entity.Movie", b =>
                {
                    b.Navigation("CastAndMovie");
                });
#pragma warning restore 612, 618
        }
    }
}
